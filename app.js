// app.js ‚Äì Updated for full SDOH alignment, translation toggle integrity, and photo preview functionality

const i18nStrings = {
  en: {
    app: { title: "Healthy Homes Practitioner App", intro: "This tool helps field workers assess housing-related health risks and social needs." },
    language: { label: "Language:" },
    inspection: {
      title: "Home Inspection Checklist",
      moldVisible: "Visible mold",
      leakingPipes: "Water damage or leaks",
      noVentilation: "Poor ventilation",
      pestDroppings: "Signs of pests",
      electrical: "Unsafe electrical systems",
      tripHazards: "Trip hazards",
      otherHazards: "Other risks"
    },
    sdoh: {
      title: "Resident SDOH Questionnaire",
      housingStability: "Is your housing stable?",
      disabilityStatus: "Do you or anyone in your household have a disability?",
      utilityShutoff: "Have your utilities been shut off in the past year?",
      foodInsecurity: "How often do you worry about running out of food?",
      languagePref: "Preferred language for communication?",
      incomeLevel: "What is your monthly household income? (optional)"
    },
    consent: {
      title: "Consent & Signature",
      explained: "I have explained and received consent.",
      name: "Resident Name:",
      signature: "Signature:"
    },
    location: { title: "Inspection Map Location" },
    env: {
      title: "Environmental Context",
      asthmaRisk: "Asthma Risk:",
      leadRisk: "Lead Risk:",
      pm25: "PM2.5:",
      useLocation: "üìç Use My Location"
    },
    photo: { label: "Upload Photos (optional)" },
    fhir: {
      outputTitle: "FHIR JSON Output",
      generate: "Generate FHIR Report",
      downloadJson: "Download JSON",
      downloadPdf: "Download PDF"
    }
  },
  zh: {
    app: { title: "ÂÅ•Â∫∑‰ΩèÂÆÖÂØ¶Ë∏êËÄÖÊáâÁî®Á®ãÂºè", intro: "Ê≠§Â∑•ÂÖ∑Âπ´Âä©ÁèæÂ†¥Â∑•‰Ωú‰∫∫Âì°Ë©ï‰º∞Ëàá‰ΩèÂÆÖÁõ∏ÈóúÁöÑÂÅ•Â∫∑È¢®Èö™ÂíåÁ§æÊúÉÈúÄÊ±Ç„ÄÇ" },
    language: { label: "Ë™ûË®ÄÔºö" },
    inspection: {
      title: "ÊàøÂ±ãÊ™¢Êü•Ê∏ÖÂñÆ",
      moldVisible: "ÂèØË¶ãÈª¥Ëèå",
      leakingPipes: "Ê∞¥ÊêçÊàñÊºèÊ∞¥",
      noVentilation: "ÈÄöÈ¢®‰∏çËâØ",
      pestDroppings: "ÂÆ≥Ëü≤Ë∑°Ë±°",
      electrical: "ÈõªÂäõÁ≥ªÁµ±‰∏çÂÆâÂÖ®",
      tripHazards: "ÁµÜÂÄíÂç±Èö™",
      otherHazards: "ÂÖ∂‰ªñÈ¢®Èö™"
    },
    sdoh: {
      title: "Â±ÖÊ∞ëÁ§æÊúÉÂÅ•Â∫∑Ê±∫ÂÆöÂõ†Á¥†ÂïèÂç∑",
      housingStability: "ÊÇ®ÁöÑ‰ΩèÊàøÊòØÂê¶Á©©ÂÆöÔºü",
      disabilityStatus: "ÊÇ®ÊàñÊÇ®ÁöÑÂÆ∂Â∫≠ÊàêÂì°ÊòØÂê¶ÊúâÊÆòÁñæÔºü",
      utilityShutoff: "ÈÅéÂéª‰∏ÄÂπ¥ÂÖßÊÇ®ÁöÑÊ∞¥ÈõªÊòØÂê¶Ë¢´ÂÅúÁî®Ôºü",
      foodInsecurity: "ÊÇ®ÊúâÂ§öÂ∏∏ÊìîÂøÉÈ£üÁâ©‰∏çË∂≥Ôºü",
      languagePref: "Ê∫ùÈÄöÂÅèÂ•ΩÁöÑË™ûË®ÄÔºü",
      incomeLevel: "ÊÇ®ÊØèÊúàÁöÑÂÆ∂Â∫≠Êî∂ÂÖ•ÊòØÂ§öÂ∞ëÔºüÔºàÂèØÈÅ∏Â°´Ôºâ"
    },
    consent: {
      title: "ÂêåÊÑèËàáÁ∞ΩÂêç",
      explained: "ÊàëÂ∑≤Ë™™Êòé‰∏¶Áç≤ÂæóÂêåÊÑè„ÄÇ",
      name: "Â±ÖÊ∞ëÂßìÂêçÔºö",
      signature: "Á∞ΩÂêçÔºö"
    },
    location: { title: "Ê™¢Êü•Âú∞Âúñ‰ΩçÁΩÆ" },
    env: {
      title: "Áí∞Â¢ÉËÉåÊôØ",
      asthmaRisk: "Ê∞£ÂñòÈ¢®Èö™Ôºö",
      leadRisk: "ÈâõÊö¥Èú≤È¢®Èö™Ôºö",
      pm25: "PM2.5Ôºö",
      useLocation: "üìç ‰ΩøÁî®ÊàëÁöÑ‰ΩçÁΩÆ"
    },
    photo: { label: "‰∏äÂÇ≥ÁÖßÁâáÔºàÂèØÈÅ∏Ôºâ" },
    fhir: {
      outputTitle: "FHIR JSON Ëº∏Âá∫",
      generate: "Áî¢ÁîüFHIRÂ†±Âëä",
      downloadJson: "‰∏ãËºâ JSON",
      downloadPdf: "‰∏ãËºâ PDF"
    }
  }
};

function translate(lang) {
  const dict = i18nStrings[lang];
  document.querySelectorAll('[data-i18n]').forEach(el => {
    const keys = el.getAttribute('data-i18n').split('.');
    let text = dict;
    keys.forEach(k => text = text?.[k]);
    if (text) el.textContent = text;
  });
  document.querySelectorAll('[data-i18n-options]').forEach(el => {
    const key = el.getAttribute('data-i18n-options').split('.').pop();
    el.innerHTML = `
      <option value="">Select</option>
      <option value="yes">${lang === 'zh' ? 'ÊòØ' : 'Yes'}</option>
      <option value="no">${lang === 'zh' ? 'Âê¶' : 'No'}</option>
    `;
  });
}

document.getElementById("langSelect").addEventListener("change", e => translate(e.target.value));
window.addEventListener("DOMContentLoaded", () => translate("en"));

function generateFHIR() {
  const sdoh = {
    housingStability: document.getElementById("housingStability").value,
    disabilityStatus: document.getElementById("disabilityStatus").value,
    utilityShutoff: document.getElementById("utilityShutoff").value,
    foodInsecurity: document.getElementById("foodInsecurity").value,
    preferredLanguage: document.getElementById("preferredLanguage").value,
    incomeLevel: document.getElementById("incomeLevel").value
  };
  const fhir = { resourceType: "Observation", extension: Object.entries(sdoh).map(([k, v]) => ({ url: k, valueString: v })) };
  document.getElementById("output").textContent = JSON.stringify(fhir, null, 2);
}

function downloadJSON() {
  const blob = new Blob([document.getElementById("output").textContent], { type: "application/json" });
  const a = document.createElement("a");
  a.href = URL.createObjectURL(blob);
  a.download = "fhir_report.json";
  a.click();
}

function downloadPDF() {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();
  doc.text(document.getElementById("output").textContent, 10, 10);
  doc.save("fhir_report.pdf");
}

function getLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(pos => {
      const lat = pos.coords.latitude;
      const lng = pos.coords.longitude;
      const map = L.map('map').setView([lat, lng], 15);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);
      L.marker([lat, lng]).addTo(map);
      document.getElementById("userAddress").textContent = `Lat: ${lat.toFixed(4)}, Lng: ${lng.toFixed(4)}`;
    });
  }
}

document.getElementById("photoUpload").addEventListener("change", function () {
  const preview = document.getElementById("photoPreview");
  const status = document.getElementById("uploadStatus");
  preview.innerHTML = "";
  [...this.files].forEach(file => {
    const reader = new FileReader();
    reader.onload = e => {
      const img = document.createElement("img");
      img.src = e.target.result;
      img.className = "w-full rounded border border-gray-300";
      preview.appendChild(img);
    };
    reader.readAsDataURL(file);
  });
  status.textContent = `${this.files.length} photo(s) uploaded.`;
});
